{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to HyperSHIP","text":"<p>HYbrid Power EmulatoR for SHip Propulsion Systems (HyperSHIP) </p> <p><code>hypership</code> is an open-source <code>python</code> package for dynamic simulation and control desing of hybrid shipborad propulsion systems.</p> <p>Supported configurations<sup>1</sup>:</p> <ul> <li> Hybrid-Mechanical</li> <li> Hybrid-Electrical</li> </ul>"},{"location":"#basic-usage","title":"Basic usage","text":"Example: Dynamic simulation of 3P induction machine (Leroy-Somer 2P LSES 100L 3kW)<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport hypership as hs\n\nsim = hs.Simulator(dt=1e-3,t_end=6,type='hy_mech',ctrl_sample_time=1e-3)\ncurrent_meas = hs.components.Measurement_3ph(name='line_current')\nmg = hs.components.IM(name='M/G',V_ph_n_max=1000)\n\n@hs.utils.input_signal_decorator(signal_type='constant',value=2870)\ndef ref(t,u): # [rpm]\n    return u\n\n@hs.utils.input_signal_decorator(signal_type='step',init_value=0,step_value=8,step_time=3)\ndef dstrb(t,u): # [Nm]\n    return u\n\nbw = 2*np.pi*100; Kp_d, Kp_q, Ki_dq = bw*mg.L_sigma, bw*mg.L_sigma, bw*mg.R_s\n\ni_ds_ctrl = hs.control.PI(sample_time=sim.dt,Kp=Kp_d,Ti=Kp_d/Ki_dq,anti_windup_type='clamping')\ni_qs_ctrl = hs.control.PI(sample_time=sim.dt,Kp=Kp_q,Ti=Kp_q/Ki_dq,anti_windup_type='clamping')\nim_speed_pi = hs.control.PI(sample_time=sim.ctrl_sample_time,Kp=10,Ti=0.1,anti_windup_type='back-calculation')\n\nwith hs.utils.timer():\n    sim.run_IM_template_case(case_components={'mg': mg,'current_meas': current_meas},\n                             load_torque=dstrb,\n                             speed_ref=ref,\n                             i_d_ctrl=i_ds_ctrl,\n                             i_q_ctrl=i_qs_ctrl,\n                             speed_ctrl=im_speed_pi\n                             )\n\nhs.scope.do_im_plot(sim_case=sim,start_time_index=np.argmax(sim.t_values &gt;= 0.0),save_path=hs.PATH_OUTPUT_FIGS,timestamp=hs.timestamp,save_fig=True)\nplt.show(block=True)\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#prerequisites","title":"Prerequisites:","text":"<ul> <li>An installation of poetry is needed. <sup>2</sup></li> </ul>"},{"location":"#how-to-use-hypership-developement","title":"How to use <code>hypership</code> (developement)","text":"<ol> <li><code>ssh://git@git-ssh.devops.wartsila.com:7999/~sch091/hypership.git</code> (clone the repository in a local directory)</li> <li><code>cd hypership/</code> (go to the cloned local directory \u2192 includes <code>pyproject.toml</code>)</li> <li> <p>Check <code>python-3.13.1</code> installation:</p> </li> <li> <p>IF using <code>pyenv</code>:</p> <ol> <li><code>pyenv install 3.13.1</code></li> <li><code>pyenv local 3.13.1</code></li> </ol> </li> <li> <p>ELSE:</p> <ul> <li><code>poetry env use /full/path/to/python.exe</code></li> </ul> </li> <li> <p><code>poetry install</code> (creates a new virtual environment with all requirements installed)</p> </li> </ol> Validate installation:<pre><code>poetry run python examples/im_template.py\n</code></pre>"},{"location":"#package-structure","title":"Package structure","text":"Module Description <code>simulation.py</code> simulation coordinator <code>components.py</code> collection of physical components <code>control.py</code> collection of controllers <code>scope.py</code> results visualization <code>utils.py</code> various utility functions <ol> <li> <p>Available configurations will be expanded.\u00a0\u21a9</p> </li> <li> <p>Recommended installation (Windows - Powershell): <code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -</code> \u21a9</p> </li> </ol>"},{"location":"about/","title":"About","text":"<p>More extensive/detailed descriptions will come here...</p>"},{"location":"about/#systems-infomration-flow","title":"Systems infomration flow","text":"CurrentProposalOthers <pre><code>sequenceDiagram\n        participant Pilot\n        participant PCS\n        participant EPMS\n        participant UNIC\n        participant DRIVE\n        participant ICE\n        participant MG\n        participant PROP\n\n\n        box rgba(235, 245, 255, 0.25) Process\n            participant ICE\n            participant MG\n            participant PROP\n        end\n\n        box rgba(230, 250, 230, 0.25) Controllers\n            participant PCS\n            participant EPMS\n            participant UNIC\n            participant DRIVE\n        end\n\n\n        Pilot-&gt;&gt;PCS: bridge lever &lt;br/&gt; position\n        activate PCS\n        EPMS-&gt;&gt;PCS: power demand &lt;br/&gt; (PTO reference)\n        activate EPMS\n        loop Schneider PLC\n            Note over PCS: mode selection &lt;br/&gt; (from PTO ref)\n            PCS-&gt;&gt;EPMS: RPM SP\n            loop Pitch Control (PI)\n                PCS-&gt;&gt;PROP: pitch reference\n                activate PROP\n                PROP--&gt;&gt;PCS: pitch measurement\n                deactivate PROP\n            end\n            PCS-&gt;&gt;UNIC: speed reference\n            deactivate PCS\n            activate UNIC\n            loop ME Speed Control (PI)\n                UNIC-&gt;&gt;ICE: fuel index\n                activate ICE\n                ICE--&gt;&gt;UNIC: speed measurement &lt;br/&gt;(feedback)\n                deactivate UNIC\n            end\n            ICE--&gt;&gt;EPMS: speed measurement (where is it used?)\n            Note over ICE: Calculation delay\n            ICE--&gt;&gt;EPMS: load measurement (feedback)\n            deactivate ICE\n            Note over EPMS: Droop &lt;br/&gt; Compensator &lt;br/&gt; Analog\n            EPMS-&gt;&gt;DRIVE: speed reference\n            activate DRIVE\n            loop MI Speed Control (P)\n                Note over DRIVE,MG: PROPORTIONAL\n                DRIVE-&gt;&gt;MG: voltage references\n                activate MG\n                MG--&gt;&gt;DRIVE: speed measurement (?) / &lt;br/&gt; frequency estimation\n                deactivate MG\n            end\n            DRIVE--&gt;&gt;EPMS: speed measurement (feedback)\n            DRIVE--&gt;&gt;EPMS: power measurement (feedback)\n            deactivate DRIVE\n            deactivate EPMS\n        end\n%%{init:{'theme':'base'}}%%\n%%{init:{'themeCSS':\n    '.actor { stroke: #0D9488; fill: rgba(13, 148, 136, 0.2); };.messageLine0:nth-of-type(4) { stroke: rgb(255, 96, 3); };.messageLine0:nth-of-type(6) { stroke: rgb(255, 96, 3); };.messageLine0:nth-of-type(11) { stroke: rgb(31, 243, 66); };.messageLine0, .messageLine1 { stroke-width: 3px !important; };.messageText:nth-of-type(1) { fill: blue; font-size: 20px !important;}; g:nth-of-type(10) rect.actor { stroke:blue;fill: rgba(78, 16, 221, 0.3); }; g:nth-of-type(18) rect.actor { stroke:blue;fill: rgba(78, 16, 221, 0.3); };g:nth-of-type(9) rect.actor { stroke:blue;fill: rgba(255, 96, 3, 0.5); }; g:nth-of-type(17) rect.actor { stroke:blue;fill: rgba(255, 96, 3, 0.5); };g:nth-of-type(16) rect.actor { stroke:blue;fill: lightgreen; };g:nth-of-type(8) rect.actor { stroke:blue;fill: lightgreen; }; g:nth-of-type(5) .note { stroke:black;fill: crimson; };.note { stroke: #000000 !important; stroke-width: 1.5px; };.actor-line { stroke:rgb(83, 152, 231); };text.actor { font-weight: bold; font-size: 25px !important; }; text.messageText { font-weight: bold; font-size: 20px !important; };.activation0, .activation1, .activation2 { fill: rgb(118, 159, 230); stroke:rgb(76, 120, 197); };.loopLine { stroke:rgb(6, 9, 185); stroke-width: 3px; };.Line { stroke:rgb(6, 9, 185); stroke-width: 3px; };#arrowhead path {stroke: black; fill:black;};'}}%%</code></pre> <pre><code>sequenceDiagram\n        participant Pilot\n        participant PCS\n        participant EPMS\n        participant UNIC\n        participant DRIVE\n        participant ICE\n        participant MG\n        participant PROP\n\n\n        box rgba(235, 245, 255, 0.25) Process\n            participant ICE\n            participant MG\n            participant PROP\n        end\n\n        box rgba(230, 250, 230, 0.25) Controllers\n            participant PCS\n            participant EPMS\n            participant UNIC\n            participant DRIVE\n        end\n\n\n        Pilot-&gt;&gt;PCS: bridge lever &lt;br/&gt; position\n        activate PCS\n        EPMS-&gt;&gt;PCS: power demand &lt;br/&gt; (PTO reference)\n        activate EPMS\n        loop Schneider PLC\n            Note over PCS: mode selection &lt;br/&gt; (from PTO ref)\n            PCS-&gt;&gt;EPMS: RPM SP\n            loop Pitch Control (PI)\n                PCS-&gt;&gt;PROP: pitch reference\n                activate PROP\n                PROP--&gt;&gt;PCS: pitch measurement\n                deactivate PROP\n            end\n            Note over PCS: power request &lt;br/&gt; feedforward\n            PCS-&gt;&gt;UNIC: power reference\n            deactivate PCS\n            activate UNIC\n            loop ME Power Control (PI)\n\n                UNIC-&gt;&gt;ICE: fuel index\n                activate ICE\n                Note over ICE: Calculation delay\n                ICE--&gt;&gt;UNIC: power measurement &lt;br/&gt;(feedback)\n                deactivate UNIC\n                deactivate ICE\n            end\n            Note over EPMS: MI speed &lt;br/&gt; based on RPM SP\n            EPMS-&gt;&gt;DRIVE: speed reference\n            deactivate EPMS\n            activate DRIVE\n            loop MI Speed Control (PI)\n                Note over DRIVE,MG: PROPORTIONAL+INTEGRAL\n                DRIVE-&gt;&gt;MG: voltage references\n                activate MG\n                MG--&gt;&gt;DRIVE: speed measurement (?) / &lt;br/&gt; frequency estimation\n                deactivate MG\n            end\n            deactivate DRIVE\n        end\n%%{init:{'theme':'base'}}%%\n%%{init:{'themeCSS':\n    '.actor { stroke: #0D9488; fill: rgba(13, 148, 136, 0.2); };.messageLine0:nth-of-type(4) { stroke: rgb(255, 96, 3); };.messageLine0:nth-of-type(6) { stroke: rgb(255, 96, 3); };.messageLine0:nth-of-type(9) { stroke: rgb(31, 243, 66); };.messageLine0, .messageLine1 { stroke-width: 3px !important; };.messageText:nth-of-type(1) { fill: blue; font-size: 20px !important;}; g:nth-of-type(10) rect.actor { stroke:blue;fill: rgba(78, 16, 221, 0.3); }; g:nth-of-type(18) rect.actor { stroke:blue;fill: rgba(78, 16, 221, 0.3); };g:nth-of-type(9) rect.actor { stroke:blue;fill: rgba(255, 96, 3, 0.5); }; g:nth-of-type(17) rect.actor { stroke:blue;fill: rgba(255, 96, 3, 0.5); };g:nth-of-type(16) rect.actor { stroke:blue;fill: lightgreen; };g:nth-of-type(8) rect.actor { stroke:blue;fill: lightgreen; }; g:nth-of-type(5) .note { stroke:black;fill: crimson; };.note { stroke: #000000 !important; stroke-width: 1.5px; };.actor-line { stroke:rgb(83, 152, 231); };text.actor { font-weight: bold; font-size: 25px !important; }; text.messageText { font-weight: bold; font-size: 20px !important; };.activation0, .activation1, .activation2 { fill: rgb(118, 159, 230); stroke:rgb(76, 120, 197); };.loopLine { stroke:rgb(6, 9, 185); stroke-width: 3px; };.Line { stroke:rgb(6, 9, 185); stroke-width: 3px; };#arrowhead path {stroke: black; fill:black;};'}}%%</code></pre> <p>To be specified.</p>"},{"location":"Simulator/","title":"Components reference","text":"<p>Documentation regarding <code>simulation.py</code>, <code>utils.py</code>, and <code>scope.py</code> modules.</p> <ul> <li> <p>Define the simulation setup.</p> </li> <li> <p>Use global utility functions.</p> </li> <li> <p>Visualize and plot simulation results and signals.</p> </li> </ul>"},{"location":"Simulator/scope/","title":"Scope reference","text":"<p>Documentation regarding <code>scope.py</code> module.</p>"},{"location":"Simulator/scope/#hypership.scope","title":"<code>scope</code>","text":""},{"location":"Simulator/simulator/","title":"Simulator reference","text":"<p>Documentation regarding <code>simulation.py/Simulator</code> class.</p>"},{"location":"Simulator/simulator/#hypership.simulation.Simulator","title":"<code>Simulator</code>","text":""},{"location":"Simulator/utilities/","title":"Utilities reference","text":""},{"location":"Simulator/utilities/#general-purpose","title":"General purpose","text":""},{"location":"Simulator/utilities/#hypership.utils.saturate","title":"<code>saturate(x, low_lim, high_lim)</code>","text":"<p>Saturate a value to a given range.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>input</p> required <code>low_lim</code> <code>float</code> <p>low saturation limit</p> required <code>high_lim</code> <code>float</code> <p>high saturation limit</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>output</p>"},{"location":"Simulator/utilities/#hypership.utils.ramp_rate_limit","title":"<code>ramp_rate_limit(x, x_prev, ramp_value, time_step=1)</code>","text":"<p>Saturate a change of an input value based on a ramp limit.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>input</p> required <code>x_prev</code> <code>float</code> <p>previous input</p> required <code>ramp_value</code> <code>float</code> <p>ramp rate (per second)</p> required <code>time_step</code> <code>float</code> <p>simulation time step.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>output</p>"},{"location":"Simulator/utilities/#hypership.utils.get_value_from_threshold_key","title":"<code>get_value_from_threshold_key(d, query)</code>","text":"<p>Get the least upper bound dictionary value given a key.</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>dict</code> <p>dictionary (set of numbers to get the least upper bound)</p> required <code>query</code> <code>float</code> <p>querry key value</p> required <p>Returns:</p> Type Description <code>float | None</code> <p>float|None: output value from dictionary</p>"},{"location":"Simulator/utilities/#hypership.utils.multi_ramp_rate_limit","title":"<code>multi_ramp_rate_limit(x, x_prev, breakpoints, ramp_values, time_step=1)</code>","text":"<p>Saturate a change of an input value based on a function of multiple ramp limits.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>input</p> required <code>x_prev</code> <code>float</code> <p>previous input</p> required <code>breakpoints</code> <code>list</code> <p>points where the ramp limit values change</p> required <code>ramp_values</code> <code>list</code> <p>ramp limit values</p> required <code>time_step</code> <code>int</code> <p>simulation time step.</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If querry value is out of range for the given breakpoints.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>output</p>"},{"location":"Simulator/utilities/#hypership.utils.deadzone","title":"<code>deadzone(x, threshold_min, threshold_max)</code>","text":"<p>Apply a deadzone (zero output) around a given input value.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>input</p> required <code>threshold_min</code> <code>float</code> <p>deadzone low threshold</p> required <code>threshold_max</code> <code>float</code> <p>deadzone high threshold</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>output</p>"},{"location":"Simulator/utilities/#hypership.utils.first_order_system_template","title":"<code>first_order_system_template(tau, K=1)</code>","text":"<p>Create a first order dynamic system</p> <p>Parameters:</p> Name Type Description Default <code>tau</code> <code>float</code> <p>time constant</p> required <code>K</code> <code>float</code> <p>gain.</p> <code>1</code> <p>Returns:</p> Type Description <code>Callable[[float, float], float]</code> <p>Callable[[float,float],float]: dynamic equation for first order system</p>"},{"location":"Simulator/utilities/#signal-generator","title":"Signal generator","text":""},{"location":"Simulator/utilities/#hypership.utils.input_signal_decorator","title":"<code>input_signal_decorator(signal_type='constant', **kwargs)</code>","text":"<p>Signal generator (as a decorator)</p> <p>Parameters:</p> Name Type Description Default <code>signal_type</code> <code>str</code> <p>type of signal to generate (i.e., constnt, step, ramp, etc).</p> <code>'constant'</code>"},{"location":"Simulator/utilities/#application-examples","title":"Application examples","text":"<pre><code>import hypership as hs\n</code></pre>"},{"location":"Simulator/utilities/#constant-value","title":"Constant value","text":"Constant=10<pre><code>@hs.utils.input_signal_decorator(signal_type='constant',value=10)\n</code></pre>"},{"location":"Simulator/utilities/#step","title":"Step","text":"Step from 0 to 1 at 15 seconds.<pre><code>@hs.utils.input_signal_decorator(signal_type='step',init_value=0,step_value=1,step_time=15)\n</code></pre>"},{"location":"Simulator/utilities/#double-step","title":"Double Step","text":"Step from 0 to 1 at 15 seconds, and then back to 0 at 20 seconds.<pre><code>@hs.utils.input_signal_decorator(signal_type='double_step',init_value=0,step_1_value=1,step_1_time=15,step_2_value=0,step_2_time=20)\n</code></pre>"},{"location":"Simulator/utilities/#ramp","title":"Ramp","text":"Ramp from 0 to 1 during 10 seconds, starting after 15 seconds of simulation time.<pre><code>@hs.utils.input_signal_decorator(signal_type='ramp',start_time=15,init_value=0,end_value=1,ramp_time=10)\n</code></pre>"},{"location":"Simulator/utilities/#arbitary-custom","title":"Arbitary (custom)","text":"Custom definition for sinusoidal function, starting after 20 seconds of simulation.<pre><code>@hs.utils.input_signal_decorator(signal_type='arbitrary',signal=lambda t: 0 if t &lt; 20 else 10000*np.sin(2 * np.pi * 0.01 * (t-20))) # [Nm]\n</code></pre>"},{"location":"Simulator/utilities/#miscellaneous","title":"Miscellaneous","text":""},{"location":"Simulator/utilities/#hypership.utils.UnitsConversion","title":"<code>UnitsConversion</code>","text":"<p>Class for easy conversion of engineering units.</p>"},{"location":"Simulator/utilities/#hypership.utils.timer","title":"<code>timer()</code>","text":"<p>A context manager to time the simulation execution.</p> <p>Yields:</p> Type Description <code>None</code> <p>Generator[None, Any, None]: current value of actual time</p>"},{"location":"Simulator/utilities/#hypership.utils.cleanup_figures","title":"<code>cleanup_figures(figs_path)</code>","text":"<p>Deleting existing saved figures (cleanup of output figures).</p> <p>Parameters:</p> Name Type Description Default <code>figs_path</code> <code>Path</code> <p>path where figures are saved</p> required"},{"location":"Simulator/controllers/epms/","title":"EPMS","text":""},{"location":"Simulator/controllers/epms/#current-active-peak-shaving-aps-implementation","title":"Current Active Peak Shaving (APS) implementation","text":""},{"location":"Simulator/controllers/epms/#peak-shaving-function","title":"Peak Shaving Function","text":"<pre><code>flowchart LR\n    Input1(MI kW) --&gt; Sum1((+))\n    Input2(ME kW) --&gt; Sum1((+))\n\n    style Input1 fill:#bbf,stroke:#33f\n    style Input2 fill:#bbf,stroke:#33f\n\n    Input3(MI&lt;br&gt;Setpoint) --&gt; Sum2((+))\n    Input4(Charge&lt;br&gt;Order) --&gt; Sum2((+))\n\n    style Input3 fill:#bbf,stroke:#33f\n    style Input4 fill:#bbf,stroke:#33f\n\n    Sum1 --&gt;|Power kW| HPF[[High Pass&lt;br&gt;Filter]]\n\n    style HPF fill:#fbb,stroke:#700\n\n    HPF --&gt; LPF[Low Pass&lt;br&gt;Filter]\n    LPF --&gt; RL[Rate&lt;br&gt;Limiter]\n    RL --&gt; SAT[Saturation]\n\n    SAT --&gt; Sum3((+))\n    Sum2 --&gt; Sum3((+))\n\n    Sum3 --&gt;|Power&lt;br&gt;reference| DCA[Droop&lt;br&gt;Compensator&lt;br&gt;Analog]\n    Sum1 --&gt;|Power&lt;br&gt;measurement| DCA\n\n    linkStyle 10 stroke:#00a86b,stroke-width:2px\n    linkStyle 11 stroke:#00a86b,stroke-width:2px\n\n    DCA --&gt; Output{{MI&lt;br&gt;speed ref&lt;br&gt;_to Drive_}}\n    style Output fill:#f9f,stroke:#333,stroke-width:2px</code></pre>"},{"location":"Simulator/controllers/epms/#mi-power-control-droop-compensator-analog","title":"MI power control (Droop Compensator Analog)","text":"<pre><code>flowchart LR\n    Power_ref[/Power&lt;br&gt;_ref_/] --\"+\"--&gt; Sum1((\u03a3))\n    Power_meas[/Power&lt;br&gt;_meas_/] --\"-\"--&gt; Sum1\n\n    style Power_ref fill:#b3f0d7,stroke:#00a86b\n    style Power_meas fill:#b3f0d7,stroke:#00a86b\n\n    style Sum1 fill:white,stroke:black\n\n    Sum1 --&gt; Deadzone1[Deadzone]\n    Deadzone1 --&gt; PI[[PI&lt;br&gt;_MI power_]]\n\n    style PI fill:#fbb,stroke:#700\n\n    PI --&gt; Div((/))\n\n    Power_nom&gt;MI Power&lt;br&gt;_rated_] --&gt; Div((/))\n    style Power_nom fill:#FAFAD2,stroke:#D4AF37\n\n    Div --&gt; Times((x))\n\n    Speed_nom&gt;MI speed&lt;br&gt;_rated_] --&gt; Times((x))\n    style Speed_nom fill:#FAFAD2,stroke:#D4AF37\n\n    Droop&gt;droop&lt;br&gt;setting] --&gt; Times((x))\n    style Droop fill:#FAFAD2,stroke:#D4AF37\n\n    Times --&gt; Sum3((+))\n    Speed_nom --&gt; Sum3\n\n    Speed_nom --\"+\"--&gt; Sum2((\u03a3))\n    Speed_meas(MI Speed&lt;br&gt;_meas_) --\"-\"--&gt; Sum2\n    style Speed_meas fill:#bbf,stroke:#33f\n\n    style Sum2 fill:white,stroke:black\n\n    Sum2 --&gt; Deadzone2[Deadzone]\n    Deadzone2 --&gt; Gain[Feed forward&lt;br&gt;gain]\n    Gain --&gt; Sum3\n    Sum3 --&gt; Output{{MI&lt;br&gt;speed ref&lt;br&gt;_to Drive_}}\n    style Output fill:#f9f,stroke:#333,stroke-width:2px</code></pre>"},{"location":"components/","title":"Components reference","text":"<p>Documentation regarding <code>components.py</code> module and systems modelling.</p>"},{"location":"components/#list-of-available-components","title":"List of available components","text":"<ul> <li> <p> Internal Combustion Engine: ICE</p> </li> <li> <p> Motor/Generator: M/G</p> </li> <li> <p> Gearbox: GB</p> </li> <li> <p> Propeller: PROP</p> </li> <li> <p> Shaftline: SL</p> </li> <li> <p> Battery Energy Storage System: BESS</p> </li> <li> <p> Filter: Filter</p> </li> <li> <p> Voltage Source: VS</p> </li> </ul>"},{"location":"components/bess/","title":"Battery Energy Storage System (BESS)","text":""},{"location":"components/bess/#hypership.components.BESS","title":"<code>BESS</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/bess/#hypership.components.BESS.__init__","title":"<code>__init__(name='BESS', type='Li-ion-generic', rated_capacity_kWh=994, nominal_voltage=1100, N_cells_series=1, N_cells_parallel=1, cell_voltage_curve=None)</code>","text":"<p>Class describing the dynamic behavior of a battery system.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>component name.</p> <code>'BESS'</code> <code>type</code> <code>str</code> <p>cell type.</p> <code>'Li-ion-generic'</code> <code>rated_capacity_kWh</code> <code>int</code> <p>all cells capacity.</p> <code>994</code> <code>nominal_voltage</code> <code>int</code> <p>bess voltage.</p> <code>1100</code> <code>N_cells_series</code> <code>int</code> <p>number of cells in series.</p> <code>1</code> <code>N_cells_parallel</code> <code>int</code> <p>number of cells in parallel.</p> <code>1</code> <code>cell_voltage_curve</code> <code>_type_</code> <p>custom cell open circuit voltage curve.</p> <code>None</code>"},{"location":"components/bess/#hypership.components.BESS.calc_open_circuit_voltge","title":"<code>calc_open_circuit_voltge(soc)</code>","text":"<p>Calculate current open circuit voltage</p> <p>Parameters:</p> Name Type Description Default <code>soc</code> <code>float</code> <p>state of charge</p> required <p>Returns:</p> Name Type Description <code>V_oc</code> <code>float</code> <p>open circuit voltage</p>"},{"location":"components/bess/#hypership.components.BESS.calc_soc","title":"<code>calc_soc(k)</code>","text":"<p>Calculate current state of charge</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>int</code> <p>current simulation iteration index</p> required"},{"location":"components/bess/#hypership.components.BESS.dynamics","title":"<code>dynamics(model='coulomb_count')</code>","text":"<p>Dynamic equation for bess</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>selected dynamic model.</p> <code>'coulomb_count'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If model selection is not valid</p>"},{"location":"components/bess/#hypership.components.BESS.plot_cell_open_circuit_voltage","title":"<code>plot_cell_open_circuit_voltage()</code>","text":"<p>Visualize current cell selection open circuit voltage vs soc</p>"},{"location":"components/filter/","title":"Filter","text":""},{"location":"components/filter/#hypership.components.Filter","title":"<code>Filter</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/filter/#hypership.components.Filter.__init__","title":"<code>__init__(name='filter', type='lowpass')</code>","text":"<p>A class for simulating digital filters</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>component name.</p> <code>'filter'</code> <code>type</code> <code>str</code> <p>filter type (i.e., lowpass, highpass, etc.).</p> <code>'lowpass'</code>"},{"location":"components/filter/#hypership.components.Filter.build","title":"<code>build(sample_rate, discrtization='tustin', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>sample_rate</code> <code>float</code> <p>digital sampling frequency.</p> required <code>discrtization</code> <code>str</code> <p>discretization method.</p> <code>'tustin'</code>"},{"location":"components/filter/#hypership.components.Filter.reset","title":"<code>reset()</code>","text":"<p>Reset filter state</p>"},{"location":"components/gb/","title":"Gearbox (GB)","text":""},{"location":"components/gb/#hypership.components.GearBox","title":"<code>GearBox</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/gb/#hypership.components.GearBox.__init__","title":"<code>__init__(name='gearbox', use_eff_table=False, given_inertia=False, J=1, J_shaft_ice=1, J_shaft_mg=1, J_shaft_prop=1, reduction_ratio_ice=4.355, reduction_ratio_mg=2, efficiency=0.95, n_ice_nom=720 / 60, M_ice_nom=1, n_mg_nom=485 / 60, M_mg_nom=1, n_p_nom=230 / 60)</code>","text":"<p>Class describing the dynamic behavior of a gearbox.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>description.</p> <code>'gearbox'</code> <code>use_eff_table</code> <code>bool</code> <p>description.</p> <code>False</code> <code>given_inertia</code> <code>bool</code> <p>description.</p> <code>False</code> <code>J</code> <code>int</code> <p>description.</p> <code>1</code> <code>J_shaft_ice</code> <code>int</code> <p>description.</p> <code>1</code> <code>J_shaft_mg</code> <code>int</code> <p>description.</p> <code>1</code> <code>J_shaft_prop</code> <code>int</code> <p>description.</p> <code>1</code> <code>reduction_ratio_ice</code> <code>float</code> <p>description.</p> <code>4.355</code> <code>reduction_ratio_mg</code> <code>int</code> <p>description.</p> <code>2</code> <code>efficiency</code> <code>float</code> <p>description.</p> <code>0.95</code> <code>n_ice_nom</code> <code>_type_</code> <p>description.</p> <code>720 / 60</code> <code>M_ice_nom</code> <code>int</code> <p>description.</p> <code>1</code> <code>n_mg_nom</code> <code>_type_</code> <p>description.</p> <code>485 / 60</code> <code>M_mg_nom</code> <code>int</code> <p>description.</p> <code>1</code> <code>n_p_nom</code> <code>_type_</code> <p>description.</p> <code>230 / 60</code>"},{"location":"components/gb/#hypership.components.GearBox.calc_efficiency","title":"<code>calc_efficiency(load_pu)</code>","text":"<p>Calculate instantaneous efficieny</p> <p>Parameters:</p> Name Type Description Default <code>load_pu</code> <code>float</code> <p>load level (per unit)</p> required"},{"location":"components/gb/#hypership.components.GearBox.calc_torque","title":"<code>calc_torque(M_ice, M_pmsm, n_p)</code>","text":"<p>Calculate transmitted (output) torque.</p> <p>Parameters:</p> Name Type Description Default <code>M_ice</code> <code>float</code> <p>input ICE torque</p> required <code>M_pmsm</code> <code>float</code> <p>input MG torque</p> required <code>n_p</code> <code>float</code> <p>propeller shaft speed</p> required"},{"location":"components/gb/#hypership.components.GearBox.plot_efficiency_map","title":"<code>plot_efficiency_map()</code>","text":"<p>Visualize efficiency vs load curve.</p>"},{"location":"components/ice/","title":"Internal Combustion Engine (ICE)","text":""},{"location":"components/ice/#hypership.components.ICE","title":"<code>ICE</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/ice/#hypership.components.ICE.__init__","title":"<code>__init__(name='ICE', tau_d=5, H=1.148, J=None, D=0.05, rated_power_W=5400 * 1000, rated_speed_rpm=720, LHV_MJ_pkg=42.7, pwr_ref_pu=0.75, use_multi_ramp=False)</code>","text":"<p>Class describing the dynamic behavior of an Internal Combustion Engine.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>component name.</p> <code>'ICE'</code> <code>tau_d</code> <code>int</code> <p>description.</p> <code>5</code> <code>H</code> <code>float</code> <p>description.</p> <code>1.148</code> <code>J</code> <code>_type_</code> <p>description.</p> <code>None</code> <code>D</code> <code>float</code> <p>description.</p> <code>0.05</code> <code>rated_power_W</code> <code>_type_</code> <p>description.</p> <code>5400 * 1000</code> <code>rated_speed_rpm</code> <code>int</code> <p>description.</p> <code>720</code> <code>LHV_MJ_pkg</code> <code>float</code> <p>fuel Low Heating Value.</p> <code>42.7</code> <code>pwr_ref_pu</code> <code>float</code> <p>power reference (per unit).</p> <code>0.75</code> <code>use_multi_ramp</code> <code>bool</code> <p>option to use load dependent ramp capabilities.</p> <code>False</code>"},{"location":"components/ice/#hypership.components.ICE.calc_efficiency","title":"<code>calc_efficiency(power_pu)</code>","text":"<p>Calculate instantaneous efficieny</p> <p>Parameters:</p> Name Type Description Default <code>power_pu</code> <code>float</code> <p>current load value (per unit)</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>efficieny</p>"},{"location":"components/ice/#hypership.components.ICE.calc_instant_fuel_consumption","title":"<code>calc_instant_fuel_consumption(k, power_pu, sim_dt)</code>","text":"<p>Calculate instantaneous fuel consumption.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>int</code> <p>current simulation iteration</p> required <code>power_pu</code> <code>float</code> <p>current load level (per unit)</p> required <code>sim_dt</code> <code>float</code> <p>simulation time step</p> required"},{"location":"components/ice/#hypership.components.ICE.dynamics","title":"<code>dynamics(detail_level='linear')</code>","text":"<p>The modeling equation for component dynamics.</p> <p>Parameters:</p> Name Type Description Default <code>detail_level</code> <code>str</code> <p>option for simple or detailed modelling.</p> <code>'linear'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid option is provided</p>"},{"location":"components/ice/#hypership.components.ICE.limit_power_ramp","title":"<code>limit_power_ramp(torque_new, speed_new, current_power_W, sim_time_step)</code>","text":"<p>Limit the generated torque output based on the allow power ramp.</p> <p>Parameters:</p> Name Type Description Default <code>torque_new</code> <code>float</code> <p>next step ICE torque without power ramp limitation</p> required <code>speed_new</code> <code>float</code> <p>next step speed (from shaftline dynamics)</p> required <code>current_power_W</code> <code>float</code> <p>current step ICE power</p> required <code>sim_time_step</code> <code>float</code> <p>simulation time step</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>next step ICE torque that complies with power ramp limitation</p>"},{"location":"components/ice/#hypership.components.ICE.plot_fuel_maps","title":"<code>plot_fuel_maps(plot_options={'foc', 'sfoc_lin', 'sfoc_pol'})</code>","text":"<p>Visualize fuel consumtpion vs load curve.</p> <p>Parameters:</p> Name Type Description Default <code>plot_options</code> <code>set</code> <p>choose what to visualize.</p> <code>{'foc', 'sfoc_lin', 'sfoc_pol'}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If plot option is not valid.</p>"},{"location":"components/ice/#modelling-equations","title":"Modelling equations","text":""},{"location":"components/ice/#ice_linear","title":"Linear dynamics","text":"\\[\\begin{gather} \\label{eq:ice}       \\frac{dT_{ice}}{dt} = \\frac{1}{\\tau_{m}}(z-T_{ice}) \\\\      z = UNIC(z^{cmd}) \\end{gather}\\] \\[T_{ice}\\;[Nm] = z^{cmd}\\bar{T}_{ice}=z^{cmd}\\frac{\\bar{P}_{ice}}{\\bar{\\omega}_{ice}}\\] <p>where \\(z^{cmd} \\in [0,1]\\)</p>"},{"location":"components/ice/#ice_non_linear","title":"Map-based formulation","text":"<p>To better capture the torque production mechanism from a ICE, another model is developed based on the manufacturer's technical specifications, including the BSFC, \\(f_{bsfc}(p_{ice})\\;[g/kWh]\\), a function of the engine's loading \\(p_{ice}\\;[pu]\\). Note that \\(P_{ice}[W]=p_{ice}\\cdot\\bar{P}_{ice}\\).</p> <p>This model is a refined version of linear dynamics, where produced torque depends on fuel index/torque request \\(z\\;[pu]\\), the maximum fuel consumption \\(\\dot{m}_{f,max}\\;[kg/s]\\), the actual ramping capabilities of the ICE \\(\\dot{P}^{max}_{ice}\\;[kW/s]\\), its non-linear load-dependent thermal efficiency \\(\\eta_t(p_{ice})\\) and the combustion lag, with time constant \\(\\tau_c\\;[s]\\).</p> <p>From the power balance inside the engine's cylinders and the effects above, we have:</p> \\[\\begin{gather} \\label{eq:ice_bsfc}       \\frac{dT'_{ice}}{dt} = \\frac{\\eta_{mech}}{\\tau_{c}}\\left(\\frac{z\\cdot\\eta_{t}(p_{ice})\\cdot H_L\\cdot\\dot{m}_{f,max}}{\\omega_{ice}}-T'_{ice}\\right) \\\\ \\nonumber      \\\\     \\begin{cases}       T_{ice}(t) = T'_{ice}(t) , &amp; T'_{ice}\\cdot\\omega_{ice}(t+dt) \\le \\dot{P}^{max}_{ice} \\cdot dt \\\\        T_{ice}(t) =  \\frac{\\dot{P}^{max}_{ice} \\cdot dt}{\\omega_{ice}(t+dt)}, &amp; T'_{ice}\\cdot\\omega_{ice}(t+dt) &gt; \\dot{P}^{max}_{ice} \\cdot dt     \\end{cases} \\\\ \\nonumber      \\\\      \\text{where, } \\; \\eta_{t}=\\frac{P_{ice}}{\\dot{m}_f H_L}=\\frac{\\omega_{ice}T_{ice}}{\\dot{m}_fH_L}=\\left(f_{bsfc}(p_{ice})\\cdot H_L \\right)^{-1} \\end{gather}\\] <p>where \\(dt[s]\\) is the simulation timestep, \\(\\eta_{mech}\\) a mechanical shaft efficiency, \\(H_L[\\frac{J}{kg}]\\) the fuel LHV, and the maximum fuel consumption is calculated from the \\gls{ice} nominal operating point as \\(\\dot{m}_{f,max} = \\frac{f_{bsfc}(1)\\bar{P}_{ice}}{3600}\\), with instantaneous fuel consumption \\(\\dot{m}_f[g/s]= \\frac{f_{bsfc}(p_{ice})P_{ice}[kW]}{3600}\\).</p>"},{"location":"components/mg/","title":"Motor/Generator (M/G)","text":""},{"location":"components/mg/#hypership.components.IM","title":"<code>IM</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/mg/#hypership.components.PMSM","title":"<code>PMSM</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/prop/","title":"Propeller (PROP)","text":""},{"location":"components/prop/#hypership.components.Propeller","title":"<code>Propeller</code>","text":"<p>               Bases: <code>DynamicComponent</code></p> <p>Class describing the dynamic behavior of a propeller.</p>"},{"location":"components/prop/#hypership.components.Propeller.calc_power","title":"<code>calc_power(k)</code>","text":"<p>Calculate propeller absorbed power</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>int</code> <p>current simulation iteration index</p> required"},{"location":"components/prop/#hypership.components.Propeller.calc_ref_speed","title":"<code>calc_ref_speed(ref_torque)</code>","text":"<p>Calculate propeller speed that matches propeller torque for quadratic model</p> <p>Parameters:</p> Name Type Description Default <code>ref_torque</code> <code>float</code> <p>description</p> required"},{"location":"components/prop/#hypership.components.Propeller.calc_thrust","title":"<code>calc_thrust(n_p)</code>","text":"<p>Calculate propeller thrust</p> <p>Parameters:</p> Name Type Description Default <code>n_p</code> <code>float</code> <p>propeller rotational speed</p> required"},{"location":"components/prop/#hypership.components.Propeller.calc_torque","title":"<code>calc_torque(n_p)</code>","text":"<p>Calculate propeller torque</p> <p>Parameters:</p> Name Type Description Default <code>n_p</code> <code>float</code> <p>propeller rotational speed</p> required"},{"location":"components/prop/#hypership.components.Propeller.set_Kq_from_rated_torque","title":"<code>set_Kq_from_rated_torque()</code>","text":"<p>Sets torque coeeficient from rated torque.</p>"},{"location":"components/prop/#hypership.components.FPP","title":"<code>FPP</code>","text":"<p>               Bases: <code>Propeller</code></p> <p>Class describing the dynamic behavior of a Fix Pitch Propeller.</p>"},{"location":"components/prop/#hypership.components.CPP","title":"<code>CPP</code>","text":"<p>               Bases: <code>Propeller</code></p> <p>Class describing the dynamic behavior of a Controllable Pitch Propeller.</p>"},{"location":"components/prop/#hypership.components.CPP.calc_absorbed_power","title":"<code>calc_absorbed_power(rev_rpm, phi_deg, combinator_mode='constant_main_engine_mode', condition='FSAH')</code>","text":"<p>Calculate propeller power absorption given speed and pitch</p> <p>Parameters:</p> Name Type Description Default <code>rev_rpm</code> <code>float</code> <p>propeller speed</p> required <code>phi_deg</code> <code>float</code> <p>propeller pitch</p> required <code>combinator_mode</code> <code>str</code> <p>selected mode.</p> <code>'constant_main_engine_mode'</code> <code>condition</code> <code>str</code> <p>sailing conditions.</p> <code>'FSAH'</code>"},{"location":"components/prop/#hypership.components.CPP.calc_inertia_from_pitch","title":"<code>calc_inertia_from_pitch(picth_deg)</code>","text":"<p>Calculate propeller inertia as a function of pitch induced added water masss</p> <p>Parameters:</p> Name Type Description Default <code>picth_deg</code> <code>float</code> <p>propeller pitch</p> required"},{"location":"components/prop/#hypership.components.CPP.calc_power_combinator_curve","title":"<code>calc_power_combinator_curve(rev_rpm, phi_deg, combinator_mode='constant_main_engine_mode', condition='FSAH')</code>","text":"<p>Calculate propeller power from combinator curve, given speed and pitch</p> <p>Parameters:</p> Name Type Description Default <code>rev_rpm</code> <code>float</code> <p>propeller speed</p> required <code>phi_deg</code> <code>float</code> <p>propeller pitch</p> required <code>combinator_mode</code> <code>str</code> <p>selected mode.</p> <code>'constant_main_engine_mode'</code> <code>condition</code> <code>str</code> <p>sailing conditions.</p> <code>'FSAH'</code>"},{"location":"components/prop/#hypership.components.CPP.calc_torque","title":"<code>calc_torque(rev_rpm, phi_deg, combinator_mode='constant_main_engine_mode', condition='FSAH')</code>","text":"<p>Calculate propeller torque given speed and pitch</p> <p>Parameters:</p> Name Type Description Default <code>rev_rpm</code> <code>float</code> <p>propeller speed</p> required <code>phi_deg</code> <code>float</code> <p>propeller pitch</p> required <code>combinator_mode</code> <code>str</code> <p>selected mode.</p> <code>'constant_main_engine_mode'</code> <code>condition</code> <code>str</code> <p>sailing condition.</p> <code>'FSAH'</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>load torque</p>"},{"location":"components/prop/#hypership.components.CPP.define_combinator_curves_references","title":"<code>define_combinator_curves_references()</code>","text":"<p>Define the references used in combinator curves</p>"},{"location":"components/sl/","title":"ShaftLine (SL)","text":""},{"location":"components/sl/#hypership.components.ShaftLine","title":"<code>ShaftLine</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/sl/#hypership.components.ShaftLine.__init__","title":"<code>__init__(name='shaftline', J_ice_at_shaft=1, J_mg_at_shaft=1, J_gb=1, J_p=1, J_all=4600, B_t=0.05, C_t1=7.66, speed_nominal_rpm=230)</code>","text":"<p>Class describing the dynamic behavior of a shaftline.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>component name.</p> <code>'shaftline'</code> <code>J_ice_at_shaft</code> <code>int</code> <p>ICE inertia at propeller shaft.</p> <code>1</code> <code>J_mg_at_shaft</code> <code>int</code> <p>MG inertia at propeller shaft.</p> <code>1</code> <code>J_gb</code> <code>int</code> <p>gearbox inertia.</p> <code>1</code> <code>J_p</code> <code>int</code> <p>propeller inertia.</p> <code>1</code> <code>J_all</code> <code>int</code> <p>alternative inertia definition from a single value.</p> <code>4600</code> <code>B_t</code> <code>float</code> <p>rotational damping (NOT USED).</p> <code>0.05</code> <code>C_t1</code> <code>float</code> <p>rotational stiffness (NOT USED).</p> <code>7.66</code> <code>speed_nominal_rpm</code> <code>int</code> <p>propeller nominal speed.</p> <code>230</code>"},{"location":"components/sl/#hypership.components.ShaftLine.dynamics","title":"<code>dynamics(propeller_inertia='constant')</code>","text":"<p>Dynamic equation for constant/variable inertia propeller</p> <p>Parameters:</p> Name Type Description Default <code>propeller_inertia</code> <code>str</code> <p>current propeller inertia value.</p> <code>'constant'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If propeller_inertia is not constant or variable</p>"},{"location":"components/vs/","title":"Voltage Source (VS)","text":""},{"location":"components/vs/#hypership.components.VoltageSource","title":"<code>VoltageSource</code>","text":"<p>               Bases: <code>DynamicComponent</code></p>"},{"location":"components/vs/#hypership.components.VoltageSource.__init__","title":"<code>__init__(phases=3, signals='AC', f_grid=50, V_rms=230)</code>","text":"<p>A class for ideal voltage sources.</p> <p>Parameters:</p> Name Type Description Default <code>phases</code> <code>int</code> <p>number of phases.</p> <code>3</code> <code>signals</code> <code>str</code> <p>DC or AC.</p> <code>'AC'</code> <code>f_grid</code> <code>int</code> <p>grid frequency.</p> <code>50</code> <code>V_rms</code> <code>int</code> <p>rms voltage.</p> <code>230</code>"}]}